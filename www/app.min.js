'use strict';

angular.module('app', ['ionic', 'firebase', 'naif.base64'])

.config(function($stateProvider, $urlRouterProvider, $httpProvider) {

  // $httpProvider.defaults.useXDomain = true;
  //
  // delete $httpProvider.defaults.headers.common['X-Requested-With'];

  $urlRouterProvider.otherwise("/");

  $stateProvider
    .state('splash', {
      url: "/",
      templateUrl: "./partials/splash.html",
      controller: "splashCtrl",
      resolve: {
        // controller will not be loaded until $waitForAuth resolves
        // Auth refers to our $firebaseAuth wrapper in the example above
        "currentAuth": ["Auth", function(Auth) {
          // $waitForAuth returns a promise so the resolve waits for it to complete
          return Auth.$waitForAuth();
        }]
      }
    })
    .state('home', {
      url: "/home",
      templateUrl: "partials/home.html",
      controller: "homeCtrl",
      resolve: {
        // controller will not be loaded until $requireAuth resolves
        // Auth refers to our $firebaseAuth wrapper in the example above
        "currentAuth": ["Auth", function(Auth) {
          // $requireAuth returns a promise so the resolve waits for it to complete
          // If the promise is rejected, it will throw a $stateChangeError (see above)
          return Auth.$requireAuth();
        }]
      }
    })
    // .state('teacher-classroom', {
    //   url: "/teacher-classroom/:classID",
    //   templateUrl: "partials/teacher-classroom.html",
    //   controller: "teacherCtrl",
    //   resolve: {
    //     "currentAuth": ["Auth", function(Auth) {
    //       return Auth.$requireAuth();
    //     }]
    //   }
    // })
    // .state('student-classroom', {
    //   url: "/student-classroom/:classID",
    //   templateUrl: "partials/student-classroom.html",
    //   controller: "studentCtrl",
    //   params: {
    //     studentKey: null
    //   },
    //   resolve: {
    //     "currentAuth": ["Auth", function(Auth) {
    //       return Auth.$requireAuth();
    //     }]
    //   }
    // })
    // .state('chatroom-helpee', {
    //   url: "/student-classroom/:classID/chatroom-helpee/:chatID",
    //   templateUrl: "partials/chatroom-helpee.html",
    //   controller: "chatroomHelpeeCtrl",
    //   resolve: {
    //     "currentAuth": ["Auth", function(Auth) {
    //       return Auth.$requireAuth();
    //     }]
    //   }
    // })
    // .state('chatroom-helper', {
    //   url: "/student-classroom/:classID/chatroom-helper/:chatID",
    //   templateUrl: "partials/chatroom-helper.html",
    //   controller: "chatroomHelperCtrl",
    //   resolve: {
    //     "currentAuth": ["Auth", function(Auth) {
    //       return Auth.$requireAuth();
    //     }]
    //   }
    // })
    .state('profile', {
      url: "/profile",
      templateUrl: "partials/profile.html",
      controller: "profileCtrl",
      resolve: {
        "currentAuth": ["Auth", function(Auth) {
          return Auth.$requireAuth();
        }]
      }
    })
    // .state('teacher-stats', {
    //   url: "/stats",
    //   templateUrl: "partials/teacher-stats.html",
    //   controller: "statsCtrl",
    //   resolve: {
    //     "currentAuth": ["Auth", function(Auth) {
    //       return Auth.$requireAuth();
    //     }]
    //   }
    // })

})

.run(function($ionicPlatform, $rootScope, $state) {
  $ionicPlatform.ready(function() {
    if(window.cordova && window.cordova.plugins.Keyboard) {
      // Hide the accessory bar by default (remove this to show the accessory bar above the keyboard
      // for form inputs)
      cordova.plugins.Keyboard.hideKeyboardAccessoryBar(true);

      // Don't remove this line unless you know what you are doing. It stops the viewport
      // from snapping when text inputs are focused. Ionic handles this internally for
      // a much nicer keyboard experience.
      cordova.plugins.Keyboard.disableScroll(true);
    }
    if(window.StatusBar) {
      StatusBar.styleDefault();
    }
  });

  $rootScope.$on("$stateChangeError", function(event, toState, toParams, fromState, fromParams, error) {
    // We can catch the error thrown when the $requireAuth promise is rejected
    // and redirect the user back to the home page
    if (error === "AUTH_REQUIRED") {
      $state.go("splash");
    }
  });

})

angular.module('app')
.controller("homeCtrl", function(currentAuth, Auth, $state, $rootScope, $scope, $firebaseObject, $firebaseArray, $timeout) {

  var userRef = new Firebase(`https://getitgotit.firebaseio.com/users/${currentAuth.uid}`);
  var user = $firebaseObject(userRef);
  user.$bindTo($scope, 'user').then(function(){
    // make sure user didn't use back button to leave
    $timeout(function(){
      if ($scope.user.teacher){
        $state.go('teacher-classroom', {classID: $scope.user.teacher});
      }
    }, 300)
  })

  var classroomsRef = new Firebase("https://getitgotit.firebaseio.com/classrooms");
  var classrooms = $firebaseObject(classroomsRef);
  classrooms.$bindTo($scope, 'classrooms');
  var classroomsIDsRef = new Firebase("https://getitgotit.firebaseio.com/classroomsIDs");
  var classroomsIDs = $firebaseObject(classroomsIDsRef);
  classroomsIDs.$bindTo($scope, 'classroomsIDs');

  var genClassID = function(){
    var id = (parseInt(Math.random()*1000000000, 10)).toString().replace(/(\d{3})(\d{3})(\d{3})/, '$1-$2-$3');
    if (!$scope.classroomsIDs){
      return id;
    }
    return $scope.classroomsIDs[id] || id.length !== 11 ? genClassID() : id;
  }

  $scope.startNewClass = function(){
    $scope.loading = true;
    if (!$scope.user || !$scope.classrooms) {
      $scope.loading = false;
      return;
    }

    if (!$scope.user.teacher){
      var id = genClassID();
      $scope.classroomsIDs[id] = {
        teacher: currentAuth.uid
      };
      $scope.classrooms[id] = {
        teacher: currentAuth.uid
      };
      $scope.user.teacher = id;
      $state.go('teacher-classroom', {classID: id});
    } else {
      $scope.loading = false;
    }

  }

  $scope.goToClass = function(){
    $scope.loading = true;
    // wait for firebase connection, return if not valid input
    if (!$scope.user || !$scope.classrooms || !$scope.classID) {
      $scope.loading = false;
      return;
    }

    var classID = $scope.classID.replace(/(\d{3})(\d{3})(\d{3})/, '$1-$2-$3');

    // if no class with that ID exists, show error message
    if (!$scope.classrooms[classID]){
      $scope.loading = false;
      return swal('Oops', 'No class exists with that ID. Did you type it correctly?', 'error');
    };

    // otherwise, log them into the class
    var studentsRef = new Firebase(`https://getitgotit.firebaseio.com/classrooms/${classID}/students`);
    var students = $firebaseArray(studentsRef);
    students.$loaded().then(function(list){
      // set session points to 0 for student
      var student = {};
      angular.copy($scope.user, student);
      student.points = 0;
      student.classesData = null;
      student.id = $scope.user.$id;
      list.$add(student).then(function(ref){
        var key = ref.key();
        $scope.user.class = {
          id: classID,
          key: key
        };
        $state.go('student-classroom', {classID: classID});
      });
    })
  }

  $scope.rejoinClass = function(){
    $scope.loading = true;
    $state.go('student-classroom', {classID: $scope.user.class.id});
  }

  $scope.logout = function(){
    $scope.loading = true;
    Auth.$unauth();
    $state.go('splash');
  }

});

angular.module('app')
.controller("profileCtrl", function(currentAuth, Auth, $state, $rootScope, $scope, $firebaseObject, $firebaseArray, $timeout) {

  var userRef = new Firebase(`https://getitgotit.firebaseio.com/users/${currentAuth.uid}`);
  var user = $firebaseObject(userRef);
  user.$bindTo($scope, 'user')

  $scope.changeAvatar = function(newAvatar){
    $scope.user.avatar = 'data:image/jpeg;base64,' + newAvatar.base64
  }

  $scope.logout = function(){
    Auth.$unauth();
    $state.go('splash');
  }

});

angular.module('app')

.controller("splashCtrl", function(Auth, currentAuth, $state, $scope, $firebaseObject, $ionicModal, $ionicNavBarDelegate) {

  // if (currentAuth){
  //   $state.go('home');
  // }

  var usersRef = new Firebase('https://getitgotit.firebaseio.com/users')
  var users = $firebaseObject(usersRef);

  $scope.loginWithFacebook = function(){
    $scope.loggingIn = true;
    Auth.$authWithOAuthPopup("facebook").then(function(authData) {
      if (!users[authData.uid]){
        users[authData.uid] = {
          name: authData.facebook.displayName,
          avatar: authData.facebook.profileImageURL,
          points: 0,
          helpee: false,
          helper: false,
          helping: null,
          teacher: false
        }
        users.$save();
      }
      return $state.go('home');
    }).catch(function(error){
      console.log(error);
      $scope.loggingIn = false;
    })
  }

  $scope.loginWithEmail = function(user){
    $scope.loggingIn = true;
    debugger;
    Auth.$authWithPassword(user).then(function(authData) {
      return $state.go('home');
    }).catch(function(error) {
      if (error == 'Error: The specified user does not exist.'){
        // user does not exist - create a new user
        signUpWithEmail(user);
        return;
      }
      console.log(error);
      $scope.loggingIn = false;
    });
  }


  var signUpWithEmail = function(user){
    Auth.$createUser(user).then(function(userData) {
      return Auth.$authWithPassword(user);
    }).then(function(authData) {
      if (!users[authData.uid]){
        users[authData.uid] = {
          name: authData.password.email.replace(/@.*/, ''),
          avatar: 'assets/defaultPic.png',
          points: 0,
          helpee: false,
          helper: false,
          helping: null,
          teacher: false
        }
        users.$save();
      }
      return $state.go('home');
    }).catch(function(error) {
      console.log(error);
      $scope.loggingIn = false;
    });
  }

  $ionicModal.fromTemplateUrl('my-modal.html', {
    scope: $scope,
    animation: 'slide-in-up'
  }).then(function(modal) {
    $scope.modal = modal;
  });
  $scope.openModal = function() {
    $scope.modal.show();
  };
  $scope.closeModal = function() {
    $scope.modal.hide();
  };
  //Cleanup the modal when we're done with it!
  $scope.$on('$destroy', function() {
    $scope.modal.remove();
  });
  // Execute action on hide modal
  $scope.$on('modal.hidden', function() {
    // Execute action
  });
  // Execute action on remove modal
  $scope.$on('modal.removed', function() {
    // Execute action
  });

});

angular.module('app')
.factory("Auth", ["$firebaseAuth", function($firebaseAuth) {
    var ref = new Firebase("https://getitgotit.firebaseio.com");
    return $firebaseAuth(ref);
  }
]);
