'use strict';

angular.module('app', ['ionic', 'firebase', 'naif.base64'])

.config(function($stateProvider, $urlRouterProvider, $httpProvider) {

  // $httpProvider.defaults.useXDomain = true;
  //
  // delete $httpProvider.defaults.headers.common['X-Requested-With'];

  $urlRouterProvider.otherwise("/");

  $stateProvider
    .state('splash', {
      url: "/",
      templateUrl: "./partials/splash.html",
      controller: "splashCtrl",
      resolve: {
        // controller will not be loaded until $waitForAuth resolves
        // Auth refers to our $firebaseAuth wrapper in the example above
        "currentAuth": ["Auth", function(Auth) {
          // $waitForAuth returns a promise so the resolve waits for it to complete
          return Auth.$waitForAuth();
        }]
      }
    })
    .state('home', {
      url: "/home",
      templateUrl: "partials/home.html",
      controller: "homeCtrl",
      resolve: {
        // controller will not be loaded until $requireAuth resolves
        // Auth refers to our $firebaseAuth wrapper in the example above
        "currentAuth": ["Auth", function(Auth) {
          // $requireAuth returns a promise so the resolve waits for it to complete
          // If the promise is rejected, it will throw a $stateChangeError (see above)
          return Auth.$requireAuth();
        }]
      }
    })
    .state('teacher-classroom', {
      url: "/teacher-classroom/:classID",
      templateUrl: "partials/teacher-classroom.html",
      controller: "teacherCtrl",
      resolve: {
        "currentAuth": ["Auth", function(Auth) {
          return Auth.$requireAuth();
        }]
      }
    })
    .state('student-classroom', {
      url: "/student-classroom/:classID",
      templateUrl: "partials/student-classroom.html",
      controller: "studentCtrl",
      params: {
        studentKey: null
      },
      resolve: {
        "currentAuth": ["Auth", function(Auth) {
          return Auth.$requireAuth();
        }]
      }
    })
    .state('chatroom-helpee', {
      url: "/student-classroom/:classID/chatroom-helpee/:chatID",
      templateUrl: "partials/chatroom-helpee.html",
      controller: "chatroomHelpeeCtrl",
      resolve: {
        "currentAuth": ["Auth", function(Auth) {
          return Auth.$requireAuth();
        }]
      }
    })
    .state('chatroom-helper', {
      url: "/student-classroom/:classID/chatroom-helper/:chatID",
      templateUrl: "partials/chatroom-helper.html",
      controller: "chatroomHelperCtrl",
      resolve: {
        "currentAuth": ["Auth", function(Auth) {
          return Auth.$requireAuth();
        }]
      }
    })
    .state('profile', {
      url: "/profile",
      templateUrl: "partials/profile.html",
      controller: "profileCtrl",
      resolve: {
        "currentAuth": ["Auth", function(Auth) {
          return Auth.$requireAuth();
        }]
      }
    })
    .state('teacher-stats', {
      url: "/stats",
      templateUrl: "partials/teacher-stats.html",
      controller: "statsCtrl",
      resolve: {
        "currentAuth": ["Auth", function(Auth) {
          return Auth.$requireAuth();
        }]
      }
    })
    // .state('teacher-stats.all', {
    //   url: "/all",
    //   views: {
    //     "stats-all": {
    //       templateUrl: "partials/teacher-stats-all.html"
    //     }
    //   },
    //   // controller: "statsCtrl",
    //   // resolve: {
    //   //   "currentAuth": ["Auth", function(Auth) {
    //   //     return Auth.$requireAuth();
    //   //   }]
    //   // }
    // })
    // .state('teacher-stats.class', {
    //   url: "/class/:id",
    //   views: {
    //     "stats-class": {
    //       templateUrl: "partials/teacher-stats-class.html"
    //     }
    //   },
    //   // controller: "statsCtrl",
    //   // resolve: {
    //   //   "currentAuth": ["Auth", function(Auth) {
    //   //     return Auth.$requireAuth();
    //   //   }]
    //   // }
    // })

})

.run(function($ionicPlatform, $rootScope, $state) {
  $ionicPlatform.ready(function() {
    if(window.cordova && window.cordova.plugins.Keyboard) {
      // Hide the accessory bar by default (remove this to show the accessory bar above the keyboard
      // for form inputs)
      cordova.plugins.Keyboard.hideKeyboardAccessoryBar(true);

      // Don't remove this line unless you know what you are doing. It stops the viewport
      // from snapping when text inputs are focused. Ionic handles this internally for
      // a much nicer keyboard experience.
      cordova.plugins.Keyboard.disableScroll(true);
    }
    if(window.StatusBar) {
      StatusBar.styleDefault();
    }
  });

  $rootScope.$on("$stateChangeError", function(event, toState, toParams, fromState, fromParams, error) {
    // We can catch the error thrown when the $requireAuth promise is rejected
    // and redirect the user back to the home page
    if (error === "AUTH_REQUIRED") {
      $state.go("splash");
    }
  });

})

angular.module('app')
.directive('percentageGraph', function($window, $interval){

  var link = function(scope, elem, attrs){

    var width = elem[0].clientWidth;
    var height = $window.innerHeight*0.5;

    var margin = {
      left: width*0.1,
      right: width*0.1,
      top: height*0.1,
      bottom: height*0.15
    }

    var svg = d3.select(elem[0]).append('svg')
        .attr('width', width)
        .attr('height', height)

    svg.append('g')
        .attr('transform', `translate(${margin.left}, 0)`);
    svg.select('g').append('g')
        .attr('class', 'y axis');
    svg.select('g').append('g')
        .attr('class', 'yaxisLabel');
    svg.select('g').append('g')
        .attr('class', 'x axis');
    svg.select('g').append('g')
        .attr('class', 'xaxisLabel');
    svg.select('g').append('g')
        .attr('id', 'lineG');

    var update = function(){
      if (!scope.data){
        return;
      }

      width = $window.innerWidth*0.5;
      height = $window.innerHeight*0.5;

      margin = {
        left: width*0.1,
        right: width*0.2,
        top: height*0.1,
        bottom: height*0.15
      }

      svg.selectAll('path').remove();
      svg.select('.xaxisLabel').select('text').remove();
      svg.select('.yaxisLabel').select('text').remove();

      svg
          .attr('width', width)
          .attr('height', height)
        .select('g')
          .attr('transform', `translate(${margin.left}, 0)`)

      var percentages = angular.fromJson(scope.data).map(function(d, i){
        var coords = {
          x: d.time,
          y: d.percentage
        }
        return coords;
      });

      if (!percentages.length) return;

      var xMin = d3.min(percentages, function(d){ return d.x; })
      var xMax = d3.max(percentages, function(d){ return d.x; })

      var xScale = d3.time.scale()
          .domain([xMin, xMax])
          .range([0,  width - margin.right - margin.left]);

      var yScale = d3.scale.linear()
          .domain([0, 100])
          .range([height - margin.bottom - margin.top, 0])

      var lineFunction = d3.svg.line()
        .x(function(d) {
          return xScale(d.x);
        })
        .y(function(d) {
          return yScale(d.y);
        })
        .interpolate('basis');

      var xTickSize = xScale(percentages[1].x) - xScale(percentages[0].x);

      svg.select('#lineG')
        .append('path')
          .datum(percentages)
          .attr('transform', `translate(${margin.left}, ${margin.top})`)
          .attr('d', lineFunction)
          .attr('stroke', 'black')
          .attr('stroke-width', 2)
          .attr('fill', 'none')

      var xAxis = d3.svg.axis()
          .scale(xScale)
          .orient('bottom')
          .ticks(5);

      svg.select('.x.axis')
          .attr("transform", `translate(${margin.left}, ${height - margin.bottom})`)
          .call(xAxis);

      svg.select('.xaxisLabel').append('text')
          .attr('transform', `translate(${(width/2) - margin.left}, ${height})`)
          .text('Time')

      var yAxis = d3.svg.axis()
          .scale(yScale)
          .orient('left')
          .ticks(5)

      svg.select('.y.axis')
          .attr("transform", `translate(${margin.left}, ${margin.top})`)
          .call(yAxis)

      svg.select('.yaxisLabel').append('text')
          .attr('transform', `translate(${0}, ${(height/2)+margin.bottom+margin.top}) rotate(-90)`)
          .text('Comprehension %')

    }

    scope.$watch('data', update);
    angular.element($window).bind('resize', function(){
      update();
    });

  }

  return {
    template: '<div></div>',
    replace: true,
    restrict: 'EA',
    scope: {
      data: '@'
    },
    link: link
  }
})

angular.module('app')
.directive('studentCircles', function($window){

  var link = function(scope, elem, attrs){

    var width = $window.innerWidth;
    var height = $window.innerHeight - $window.innerHeight*0.2;

    height = height - height*0.2;

    var svg = d3.select(elem[0])
      .append('svg')
        .attr({width: width, height: height});
    svg.append('g');

    ////////////////////////////
    // Calculate All Greens   //
    ////////////////////////////

    var allGreenStudents = function(students){
      return students.every(function(student){
        return !student.helpee && !student.helper;
      });
    }

    var getAllGreenCoords = function(d, i, s){
      return {x: cxGreen(d, i, s), y: cyGreen(d, i, s)}
    }

    var cxGreen = function(d, i, s){
      var numRows = Math.ceil(s.length/5);
      var currentRow = Math.ceil((i+1)/5);
      var interval;
      if (s.length % 5 === 0 || currentRow !== numRows){
        interval = Math.round(width/6);
      } else {
        interval = Math.round(width/((s.length % 5) + 1));
      }
      return ((i%5)+1) * interval;
    }

    var cyGreen = function(d, i, s){
      var numRows = Math.ceil(s.length/5);
      var interval = Math.round(height/(numRows + 1));
      var currentRow = Math.ceil((i+1)/5);
      return currentRow * interval;
    }

    var crAllGreen = function(d, i, s){

      return width/20;
    }

    ////////////////////////////
    // Calculate Green Coords //
    ////////////////////////////

    var getGreenCoords = function(d, i, g){
      // split into left & right greens based on index
      return (i%2 === 0) ? {x: cxLeft(d, i, g), y: cyLeft(d, i, g)} : {x: cxRight(d, i, g), y: cyRight(d, i, g)};
    }

    var cxLeft = function(d, i, g){
      // total colums for greens on left;
      var columns = Math.ceil(g.length/5);

      // width of left area is width/3
      var interval = Math.round((width/3)/(columns + 1));

      // current column for circle
      var currentColumn = Math.ceil((i+1)/5);

      // location is the current column of circle in the left area
      return currentColumn * interval;
    }

    var cyLeft = function(d, i, g){
      // total colums for greens on left
      var columns = Math.ceil(g.length/5);

      // current column for circle
      var currentColumn = Math.ceil((i+1)/5);

      var interval;
      if (g.length % 5 === 0 || currentColumn !== columns){
        // 1) total greens on left is divisible by 5 or circle is in a row of 5
        interval = Math.round((height)/6);
      } else {
        // 2) circle is in a row with less than 5, space evenly
        interval = Math.round((height)/((g.length % 5) + 1));
      }

      // interval calculated based on index
      return (((i%5)+1) * interval);
    }

    var cxRight = function(d, i, g){
      // total colums for greens on right;
      var columns = Math.ceil(g.length/5);

      // width of right area is width/3
      var interval = Math.round((width/3)/(columns + 1));

      // current column for circle
      var currentColumn = Math.ceil((i+1)/5);

      // location is the current column of circle, offset by 2/3 width
      return (currentColumn * interval) + (2*width)/3;
    }

    var cyRight = function(d, i, g){
      // total colums for greens on right - same as left?
      var columns = Math.ceil(g.length/5);
      // current column for circle
      var currentColumn = Math.ceil((i+1)/5);

      var interval;
      if (g.length % 5 === 0 || currentColumn !== columns){
        // 1) total greens on right is divisible by 5 or circle is in a row of 5
        interval = Math.round((height)/6);
      } else {
        // 2) circle is in a row with less than 5, space evenly
        interval = Math.round((height)/((g.length % 5) + 1));
      }
      // interval calculated based on index
      return (((i%5)+1) * interval);
    }

    var crGreen = function(d, i, g){
      //
      return width > height ? width/20 : height/20;
    }


    //////////////////////////
    // Calculate Red Coords //
    //////////////////////////

    var getRedCoords = function(d, i, r){
      return {x: cxRed(d, i, r), y: cyRed(d, i, r)};
    }

    var cxRed = function(d, i, r){
      // reds will all be in the middle
      return width/2;
    }
    var cyRed = function(d, i, r){
      // scale based on how many reds there are
      var interval = height/(r.length+1);
      // return coordinate based on index, starting at 1
      return (i+1) * interval
    }
    var crRed = function(d, i, r){
      // fill middle section
      // var colWidth = width/3;
      // var colHeight = height;

      // console.log('crred',  width > height)
      // return width > height ? (width/(r.length+1))/2 : (height/(r.length+1))/2
      return ((width/3)/(r.length+1))/2;
    }


    ///////////////////////////
    // Calculate Blue Coords //
    ///////////////////////////

    var getBlueCoords = function(d, i, b, red){
      return {x: cxBlue(d, i, b, red), y: cyBlue(d, i, b, red)};
    }

    // if !red fixes error from helpee closing chat with blue inside
    var cxBlue = function(d, i, b, red){
      if (!red) return 0;
      return red.coords.x + (red.radius);
    }
    var cyBlue = function(d, i, b, red){
      if (!red) return 0;
      return red.coords.y
    }
    var crBlue = function(d, i, b, red){
      if (!red) return 0;
      // blue is 1/3 the size of red
      return red.radius - (2*red.radius/3);
    }

    var percentageColor = function(percent, students){
      var gradient = students.length ? (100 - percent)*0.01 : 0;
      if (gradient == 0){
        return {
          'background': `linear-gradient(
            to bottom,
            rgba(4, 83, 45, 0.7),
            rgba(4, 83, 45, 0.1),
            rgba(4, 83, 45, 0.7)
          `}
      }
      return {
        'background': `linear-gradient(
          to bottom,
          rgba(172, 20, 26, ${gradient}),
          rgba(255, 255, 255, 1),
          rgba(172, 20, 26, ${gradient})
        `}
    }


    var update = function(){

      width = $window.innerWidth;
      height = $window.innerHeight - $window.innerHeight*0.2;

      var students = angular.fromJson(scope.students);

      if (allGreenStudents(students)){
        // all green students = return evenly distributed
        students = students.map(function(d, i, s){
          d.color = 'green';
          d.coords = getAllGreenCoords(d, i, s);
          d.radius = crAllGreen(d, i, s);
          return d;
        });
      } else {
        // mix of reds, blues, greens
        // first separate all

        var greens = students
          .filter(function(s){
            return !s.helper && !s.helpee;
          }).map(function(d, i, g){
            d.color = 'green';
            d.coords = getGreenCoords(d, i, g);
            d.radius = crGreen(d, i, g)
            return d
          });

        var reds = students
          .filter(function(s){
            return s.helpee;
          })
          .map(function(d, i, r){
            d.color = 'red';
            d.coords = getRedCoords(d, i, r);
            d.radius = crRed(d, i, r);
            return d;
          });

        var blues = students
          .filter(function(s){
            return s.helper;
          }).map(function(d, i, b){
            // get coords of helping
            var chatID = d.helper.chatID;
            var red = reds.find(function(r){
              return r.helpee === chatID;
            });
            d.color = 'blue';
            d.coords = getBlueCoords(d, i, b, red);
            d.radius = crBlue(d, i, b, red);
            return d;
          });

        // concat to array of students;
        students = greens.concat(reds, blues);
      }

      if (!students){
        return;
      }

      var percentage = +scope.percentage.slice(0, -1);

      // $('.studentCirclesArea').css(percentageColor(percentage, students));

      svg
        .attr({width: width, height: height})


      var circle = svg.select('g').selectAll('circle')
          .data(students);

      circle.enter().append('circle')
          .attr("r", 0)
        .transition()
          .attr("cy", function(d, i){ return d.coords.y })
          .attr("cx", function(d, i) { return d.coords.x })
          .attr("r", function(d, i) { return d.radius })
          .style('fill', function(d) { return d.color })

      circle
          .attr("r", 0)
        .transition()
          .attr("cy", function(d, i){ return d.coords.y })
          .attr("cx", function(d, i) { return d.coords.x })
          .attr("r", function(d, i) { return d.radius })
          .style('fill', function(d) { return d.color });

      circle.exit()
        .transition()
          .attr('r', 0)
          .remove();

      var defs = svg.selectAll('defs')
          .data(students);
      defs.enter().append('clipPath')
          .attr('id', function(d, i) { return `student${i}`})
        .append('circle')
          .attr("r", 0)
        .transition()
          .attr("cy", function(d, i){ return d.coords.y })
          .attr("cx", function(d, i) { return d.coords.x })
          .attr("r", function(d, i) { return d.radius/2 });

      defs
          .attr('id', function(d, i) { return `student${i}`})
        .append('circle')
          .attr("r", 0)
        .transition()
          .attr("cy", function(d, i){ return d.coords.y })
          .attr("cx", function(d, i) { return d.coords.x })
          .attr("r", function(d, i) { return d.radius/2 });

      defs.exit()
        .transition()
          .attr('r', 0)
          .remove();


      var images = svg.selectAll('image')
          .data(students);
      images.enter().append('svg:image')
          .attr('width', 0)
          .attr('height', 0)
        .transition()
          .attr("x", function(d, i) { return d.coords.x - d.radius })
          .attr("y", function(d, i){ return d.coords.y - d.radius })
          .attr("width", function(d, i) { return d.radius*2 })
          .attr("height", function(d, i) { return d.radius*2 })
          .attr('xlink:href', function(d, i) { return d.avatar })
          .attr('clip-path', function(d, i) { return `url('#student${i}')` });

      images
          .attr('width', 0)
          .attr('height', 0)
        .transition()
          .attr("x", function(d, i) { return d.coords.x - d.radius })
          .attr("y", function(d, i){ return d.coords.y - d.radius })
          .attr("width", function(d, i) { return d.radius*2 })
          .attr("height", function(d, i) { return d.radius*2 })
          .attr('xlink:href', function(d, i) { return d.avatar })
          .attr('clip-path', function(d, i) { return `url('#student${i}')` });

      images.exit()
        .transition()
          .attr('width', 0)
          .attr('height', 0)
          .remove();

      var names = svg.selectAll('text')
          .data(students);

      names.enter().append('text')
          .text('')
        .transition()
          .attr("x", function(d, i) { return d.coords.x - d.radius })
          .attr("y", function(d, i) { return d.coords.y + d.radius + 25 })
          .text(function(d, i) { return `${d.name} - ${d.points} points` });

      names
          .text('')
        .transition()
          .attr("x", function(d, i) { return d.coords.x - d.radius })
          .attr("y", function(d, i) { return d.coords.y + d.radius + 25 })
          .text(function(d, i) { return `${d.name} - ${d.points} points` });

      names.exit()
        .transition()
          .text('')
          .remove();

    }

    scope.$watch('students', update);
    angular.element($window).bind('resize', function(){
      update();
    });

  }

  return {
    template: '<div class="studentCircles"></div>',
    replace: true,
    restrict: 'EA',
    scope: {
      students: '@',
      percentage: '@'
    },
    link: link
  }
})

angular.module('app')
.directive('timeData', function($window, $interval){

  var link = function(scope, elem, attrs){

    var width = $window.innerWidth;
    var height = $window.innerHeight - $window.innerHeight*0.8;

    var margin = {
      left: width*0.1,
      right: width*0.1,
      top: height*0.1,
      bottom: height*0.15
    }

    var svg = d3.select(elem[0]).append('svg')
        .attr('width', width)
        .attr('height', height)

    svg.append('g')
        .attr('transform', `translate(${margin.left}, 0)`)
      .append('defs').append('clipPath')
          .attr('id', 'clip')
        .append('rect')
          .attr('width',  width - margin.left)
          .attr('height', height);
    svg.select('g').append('g')
        .attr('class', 'y axis');
    svg.select('g').append('g')
        .attr('class', 'x axis')
        .attr('clip-path', 'url(#clip)');
    svg.select('g').append('g')
        .attr('clip-path', 'url(#clip)')
        .attr('id', 'lineG');

    var update = function(){

      width = $window.innerWidth;
      height = $window.innerHeight - $window.innerHeight*0.8;

      margin = {
        left: width*0.1,
        right: width*0.1,
        top: height*0.1,
        bottom: height*0.15
      }

      svg.selectAll('path').remove();
      // svg.selectAll('g').remove();

      svg
          .attr('width', width)
          .attr('height', height)
        .select('g')
          .attr('transform', `translate(${margin.left}, 0)`)
        .select('defs').select('clipPath')
          // .attr('id', 'clip')
        .select('rect')
          .attr('width',  width - margin.left - margin.right - margin.right*0.05)
          .attr('height', height);

      var data = angular.fromJson(scope.data).map(function(d, i){
        var coords = {
          x: d.time,
          y: d.percentage
        }
        return coords;
      });

      if (!data.length) return;

      var filler = Array(300).fill({x: 0, y: 0}).map(function(e, i){
        return {x: data[0].x - (1000*i), y:0}
      }).reverse();

      data = data.length < 300 ? filler.concat(data).slice(-300) : data.slice(-300);

      var xMin = d3.min(data, function(d){ return d.x; })
      var xMax = d3.max(data, function(d){ return d.x; })

      var xScale = d3.time.scale()
          .domain([xMin, xMax])
          .range([0,  width - margin.right - margin.left]);

      var yScale = d3.scale.linear()
          .domain([0, 100])
          .range([height - margin.bottom - margin.top, 0])

      var lineFunction = d3.svg.line()
        .x(function(d) {
          return xScale(d.x);
        })
        .y(function(d) {
          return yScale(d.y);
        })
        .interpolate('basis');

      // var xTickSize = xScale(data[data.length-1].x) - xScale(data[data.length-2].x);
      var xTickSize = xScale(data[1].x) - xScale(data[0].x);
      // var xTickSize = d3.extent(data, function(d) { return xScale(d.x) });


      // var duration = data.length < (60*5) ? 1000 + (xTickSize) : 1000;

      var duration = 1000;

      svg.select('#lineG')
        .append('path')
          .datum(data)
          .attr('transform', `translate(${0}, ${margin.top})`)
          .attr('d', lineFunction)
          .attr('stroke', 'black')
          .attr('stroke-width', 2)
          .attr('fill', 'none')
        .transition()
          .duration(duration)
          .ease('linear')
          .attr('transform', `translate(${-xTickSize}, ${margin.top})`);

      var xAxis = d3.svg.axis()
          .scale(xScale)
          .orient('bottom')
          .ticks(5);

      svg.select('.x.axis')
        .attr("transform", `translate(${0}, ${height - margin.bottom})`)
        .transition()
          .duration(duration)
          .ease('linear')
        .call(xAxis)
          .attr("transform", `translate(${xTickSize}, ${height - margin.bottom})`)

      var yAxis = d3.svg.axis()
          .scale(yScale)
          .orient('left')
          .ticks(5)

      svg.select('.y.axis')
          .call(yAxis)
          .attr("transform", `translate(0, ${margin.top})`);

    }

    scope.$watch('data', update);
    angular.element($window).bind('resize', function(){
      update();
    });
  }

  return {
    template: '<div class="timeDataArea"></div>',
    replace: true,
    restrict: 'EA',
    scope: {
      data: '@'
    },
    link: link
  }
})

angular.module('app')
.controller("chatroomHelpeeCtrl", function(Auth, currentAuth, $state, $scope, $firebaseObject, $firebaseArray, $location, $anchorScroll) {

  // document.querySelectorAll("link[rel*='icon'")[0].setAttribute('href', "assets/redcircle.ico");

  var usersRef = new Firebase(`https://getitgotit.firebaseio.com/users`);
  var users = $firebaseObject(usersRef);
  users.$bindTo($scope, 'users');

  var studentsRef = new Firebase(`https://getitgotit.firebaseio.com/classrooms/${$state.params.classID}/students`);
  $scope.students = $firebaseArray(studentsRef);

  var userRef = new Firebase(`https://getitgotit.firebaseio.com/users/${currentAuth.uid}`);
  var user = $firebaseObject(userRef);
  user.$bindTo($scope, 'user');

  var chatroomRef = new Firebase(`https://getitgotit.firebaseio.com/classrooms/${$state.params.classID}/chatrooms/${$state.params.chatID}`);
  var chatroom = $firebaseObject(chatroomRef);
  chatroom.$bindTo($scope, 'chatroom');

  var messagesRef = new Firebase(`https://getitgotit.firebaseio.com/classrooms/${$state.params.classID}/chatrooms/${$state.params.chatID}/messages`);
  $scope.messages = $firebaseArray(messagesRef);


  $scope.checkEnter = function(e){
    if (e.which === 13){
      $scope.addMessage()
    }
  }

  $scope.displayMessage = function(message){

    if (message.sender == 'admin'){
      return `${message.text}`;
    } else {
      return `${message.sender === user.$id ? 'Me' : 'User ' + message.sender.slice(-10)}: ${message.text}`
    }

  }

  $scope.addMessage = function() {
    $scope.loading = true;
    if (!$scope.newMessageText) return;
    $scope.messages.$add({
      text: $scope.newMessageText,
      sender: $scope.user.$id
    });
    $scope.newMessageText = '';
    $scope.loading = false;
  };

  // remove student if teacher ends the class;
  var classroomsRef = new Firebase(`https://getitgotit.firebaseio.com/classrooms`);
  classroomsRef.on('child_removed', function(removedClassroom){
    if (removedClassroom.key() === $state.params.classID) {
      $scope.user.helpee = false;
      $scope.user.helper = false;
      $scope.user.class = null;

      // document.querySelectorAll("link[rel*='icon'")[0].setAttribute('href', "assets/greencircle.ico");

      $state.go('home');
    }
  });

  $scope.backToClass = function(){
    $scope.loading = true;

    // update students list in class for viz
    var index = $scope.students.$indexFor($scope.user.class.key);
    $scope.students.$getRecord($scope.user.class.key).helpee = false;
    $scope.user.helpee = false;

    // add points to helpee if helper present;
    if ($scope.chatroom.helper){
      $scope.user.points = $scope.user.points + 1;
      $scope.students.$getRecord($scope.user.class.key).points = $scope.students.$getRecord($scope.user.class.key).points + 1;
    };
    $scope.students.$save(index);

    chatroom.$remove();

    // document.querySelectorAll("link[rel*='icon'")[0].setAttribute('href', "assets/greencircle.ico");

    $state.go('student-classroom', {classID: $state.params.classID})
  }

});

angular.module('app')
.controller("chatroomHelperCtrl", function(Auth, currentAuth, $state, $scope, $firebaseObject, $firebaseArray) {

  // document.querySelectorAll("link[rel*='icon'")[0].setAttribute('href', "assets/bluecircle.ico");

  var studentsRef = new Firebase(`https://getitgotit.firebaseio.com/classrooms/${$state.params.classID}/students`);
  $scope.students = $firebaseArray(studentsRef);

  var userRef = new Firebase(`https://getitgotit.firebaseio.com/users/${currentAuth.uid}`);
  var user = $firebaseObject(userRef);
  user.$bindTo($scope, 'user');

  var chatroomRef = new Firebase(`https://getitgotit.firebaseio.com/classrooms/${$state.params.classID}/chatrooms/${$state.params.chatID}`);
  var chatroom = $firebaseObject(chatroomRef);
  chatroom.$bindTo($scope, 'chatroom');

  var messagesRef = new Firebase(`https://getitgotit.firebaseio.com/classrooms/${$state.params.classID}/chatrooms/${$state.params.chatID}/messages`);
  $scope.messages = $firebaseArray(messagesRef);
  $scope.messages.$loaded().then(function(){
    $scope.messages.$add({
      text: `** User ${$scope.user.$id.slice(-10)} has joined the chat **`,
      sender: 'admin'
    })
  })


  $scope.displayMessage = function(message){
    if (message.sender == 'admin'){
      return `--- Begin Chat --- `;
    } else {
      return `${message.sender === user.$id ? 'Me' : 'User ' + message.sender.slice(-10)}: ${message.text}`
    }
  }

  $scope.checkEnter = function(e){
    if (e.which === 13){
      $scope.addMessage()
    }
  }

  $scope.addMessage = function() {
    $scope.loading = true;
    if (!$scope.newMessageText) return;
    $scope.messages.$add({
      text: $scope.newMessageText,
      sender: $scope.user.$id
    });
    $scope.newMessageText = '';
    $scope.loading = false;
  };

  var classroomsRef = new Firebase(`https://getitgotit.firebaseio.com/classrooms`);

  // if helpee closes the chat, send to home
  var chatroomsRef = new Firebase(`https://getitgotit.firebaseio.com/classrooms/${$state.params.classID}/chatrooms`);
  chatroomsRef.on('child_removed', function(chatroom){
    // if teacher ends the class - special case of child_removed, send student to home;
    classroomsRef.once('value', function(classrooms){
      // case 1) classroom still exists && the removed chatroom is current chatroom
      if (classrooms.hasChild($state.params.classID) && (chatroom.key() === $state.params.chatID)){
        $scope.loading = true;
        // update students list in class for viz
        var index = $scope.students.$indexFor($scope.user.class.key);
        $scope.user.helper = false;
        // helper successfully helped - added 5 points;
        $scope.user.points = $scope.user.points + 5;
        $scope.students.$getRecord($scope.user.class.key).points = $scope.students.$getRecord($scope.user.class.key).points  + 5
        $scope.students.$getRecord($scope.user.class.key).helper = false;

        $scope.students.$save(index);

        // document.querySelectorAll("link[rel*='icon'")[0].setAttribute('href', "assets/greencircle.ico");

        $state.go('student-classroom', {classID: $state.params.classID})

      } else if (!classrooms.hasChild($state.params.classID)) {   // case 2) classroom has been removed
        $scope.loading = true;
        $scope.user.helpee = false;
        $scope.user.helper = false;
        $scope.user.class = null;

        // document.querySelectorAll("link[rel*='icon'")[0].setAttribute('href', "assets/greencircle.ico");

        $state.go('home');
      }
    });
  });

  $scope.backToClass = function(){
    $scope.loading = true;

    $scope.messages.$add({
      text: `** User ${$scope.user.$id.slice(-10)} has left the chat **`,
      sender: 'admin'
    }).then(function(ref){
      $scope.chatroom.helper = null;
      $scope.user.helper = false;

      // update students list in class for viz
      var index = $scope.students.$indexFor($scope.user.class.key);
      $scope.students.$getRecord($scope.user.class.key).helper = false;
      $scope.students.$save(index);

      // document.querySelectorAll("link[rel*='icon'")[0].setAttribute('href', "assets/greencircle.ico");

      $state.go('student-classroom', {classID: $state.params.classID})
    })

  }

});

angular.module('app')
.controller("homeCtrl", function(currentAuth, Auth, $state, $rootScope, $scope, $firebaseObject, $firebaseArray, $timeout) {

  console.log('current Auth home', currentAuth);

  var userRef = new Firebase(`https://getitgotit.firebaseio.com/users/${currentAuth.uid}`);
  var user = $firebaseObject(userRef);
  user.$bindTo($scope, 'user');

  $scope.options = {
    loop: false,
    paginationClickable: true,
    paginationType: 'bullets',
    // effect: fade,
    // speed: 500,
  }
  $scope.data = {};
  $scope.$watch('data.slider', function(nv, ov) {
    $scope.slider = $scope.data.slider;
  })


  var classroomsRef = new Firebase("https://getitgotit.firebaseio.com/classrooms");
  var classrooms = $firebaseObject(classroomsRef);
  classrooms.$bindTo($scope, 'classrooms');
  var classroomsIDsRef = new Firebase("https://getitgotit.firebaseio.com/classroomsIDs");
  var classroomsIDs = $firebaseObject(classroomsIDsRef);
  classroomsIDs.$bindTo($scope, 'classroomsIDs');

  var genClassID = function(){
    var id = (parseInt(Math.random()*1000000000, 10)).toString().replace(/(\d{3})(\d{3})(\d{3})/, '$1-$2-$3');
    if (!$scope.classroomsIDs){
      return id;
    }
    return $scope.classroomsIDs[id] || id.length !== 11 ? genClassID() : id;
  }

  $scope.startNewClass = function(){
    $scope.loading = true;
    if (!$scope.user || !$scope.classrooms) {
      $scope.loading = false;
      return;
    }

    if (!$scope.user.teacher){
      var id = genClassID();
      $scope.classroomsIDs[id] = {
        teacher: currentAuth.uid
      };
      $scope.classrooms[id] = {
        teacher: currentAuth.uid
      };
      $scope.user.teacher = id;
      $state.go('teacher-classroom', {classID: id});
    } else {
      $scope.loading = false;
    }

  }

  $scope.goToClass = function(id){
    $scope.loading = true;
    // wait for firebase connection, return if not valid input
    if (!$scope.user || !$scope.classrooms || !id) {
      $scope.loading = false;
      return;
    }

    var classID = id.replace(/(\d{3})(\d{3})(\d{3})/, '$1-$2-$3');

    // if no class with that ID exists, show error message
    if (!$scope.classrooms[classID]){
      $scope.loading = false;
      return
      // return swal('Oops', 'No class exists with that ID. Did you type it correctly?', 'error');
    };

    // otherwise, log them into the class
    var studentsRef = new Firebase(`https://getitgotit.firebaseio.com/classrooms/${classID}/students`);
    var students = $firebaseArray(studentsRef);
    students.$loaded().then(function(list){
      // set session points to 0 for student
      var student = {};
      angular.copy($scope.user, student);
      student.points = 0;
      student.classesData = null;
      student.id = $scope.user.$id;
      list.$add(student).then(function(ref){
        var key = ref.key();
        $scope.user.class = {
          id: classID,
          key: key
        };
        $state.go('student-classroom', {classID: classID});
      });
    })
  }

  $scope.rejoinClass = function(){
    $scope.loading = true;
    $state.go('student-classroom', {classID: $scope.user.class.id});
  }

  $scope.teacherRejoinClass = function(classID){
    return `/teacher-classroom/${classID}`;
  }

  $scope.logout = function(){
    $scope.loading = true;
    Auth.$unauth();
    $state.go('splash');
  }

});

angular.module('app')
.controller("profileCtrl", function(currentAuth, Auth, $state, $rootScope, $scope, $firebaseObject, $firebaseArray, $timeout) {

  var userRef = new Firebase(`https://getitgotit.firebaseio.com/users/${currentAuth.uid}`);
  var user = $firebaseObject(userRef);
  user.$bindTo($scope, 'user')

  $scope.changeAvatar = function(newAvatar){
    $scope.user.avatar = 'data:image/jpeg;base64,' + newAvatar.base64
  }

  $scope.logout = function(){
    Auth.$unauth();
    $state.go('splash');
  }

});

angular.module('app')

.controller("splashCtrl", function(Auth, currentAuth, $state, $scope, $firebaseObject, $ionicModal, $ionicNavBarDelegate) {
  console.log(currentAuth);
  if (currentAuth){
    $state.go('home');
  }

  $scope.loggingIn = false;

  var usersRef = new Firebase('https://getitgotit.firebaseio.com/users')
  var users = $firebaseObject(usersRef);


  $scope.loginWithFacebook = function(){
    $scope.loggingIn = true;
    Auth.$authWithOAuthRedirect("facebook").then(function(authData) {
      return $state.go('home');
    }).catch(function(error) {
      if (error.code === "TRANSPORT_UNAVAILABLE") {
        Auth.$authWithOAuthPopup("facebook").then(function(authData) {
          // User successfully logged in.
          return $state.go('home');
        }).catch(function(error){
          console.log(error);
          $scope.loggingIn = false;
        });
      } else {
        // Another error occurred
        console.log(error);
        $scope.loggingIn = false;
      }
    });

  }

  $scope.loginWithEmail = function(user){
    $scope.loggingIn = true;
    Auth.$authWithPassword(user).then(function(authData) {
      $scope.closeModal();
      return $state.go('home');
    }).catch(function(error) {
      if (error == 'Error: The specified user does not exist.'){
        // user does not exist - create a new user
        signUpWithEmail(user);
        return;
      }
      console.log(error);
      $scope.loggingIn = false;
    });
  }


  var signUpWithEmail = function(user){
    Auth.$createUser(user).then(function(userData) {
      return Auth.$authWithPassword(user);
    }).then(function(authData) {
      $scope.closeModal();
      return $state.go('home');
    }).catch(function(error) {
      console.log(error);
      $scope.loggingIn = false;
    });
  }

  $ionicModal.fromTemplateUrl('my-modal.html', {
    scope: $scope,
    animation: 'slide-in-up'
  }).then(function(modal) {
    $scope.modal = modal;
  });
  $scope.openModal = function() {
    $scope.modal.show();
  };
  $scope.closeModal = function() {
    $scope.modal.hide();
  };
  //Cleanup the modal when we're done with it!
  $scope.$on('$destroy', function() {
    $scope.modal.remove();
  });
  // Execute action on hide modal
  $scope.$on('modal.hidden', function() {
    // Execute action
  });
  // Execute action on remove modal
  $scope.$on('modal.removed', function() {
    // Execute action
  });

});

angular.module('app')
.controller("statsCtrl", function(Auth, currentAuth, $state, $scope, $firebaseObject, $firebaseArray, $timeout, $interval, $ionicModal) {

  var usersRef = new Firebase(`https://getitgotit.firebaseio.com/users`);

  var userRef = new Firebase(`https://getitgotit.firebaseio.com/users/${currentAuth.uid}`);
  var user = $firebaseObject(userRef);
  user.$bindTo($scope, 'user');

  var classesDataRef = new Firebase(`https://getitgotit.firebaseio.com/users/${currentAuth.uid}/classesData`);

  ////////////////////////////
  /// POPULATE TOTALS DATA ///
  ////////////////////////////

  classesDataRef.once('value', function(allClasses){

    var allClassesArray = [];

    allClasses.forEach(function(classData){
      var data = classData.val().data;
      var time = classData.val().time;

      var classDataArray = [];
      for (var key in data){
        classDataArray.push(data[key]);
      }

      allClassesArray.push({
        time: time,
        data: classDataArray,
        id: classData.key()
      });
    });

    $scope.classesData = allClassesArray;

    var totalStudentsArray = allClassesArray.map(function(classinfo){
      return classinfo.data.reduce(function(most, snap){
        return snap.students && snap.students.length > most ? snap.students.length : most;
      }, 0);
    });
    var totalStudentsTaught = totalStudentsArray.reduce(function(total, val){
      return total + val;
    },0);

    var avgCompArray = allClassesArray.map(function(classinfo){
      return Math.round(classinfo.data.reduce(function(total, snap){
        return total + snap.percentage;
      }, 0)/classinfo.data.length);
    });
    var avgComprehensionPerClass = avgCompArray.length ? Math.round(avgCompArray.reduce(function(total, val){
      return total + val;
    }, 0)/avgCompArray.length) : 0;

    var totalClasses = allClassesArray.length;

    var avgStudentsPerClass = totalClasses ? Math.round(totalStudentsTaught/totalClasses) : 0;

    $scope.averageStudentsPerClass = avgStudentsPerClass ? avgStudentsPerClass : '---';
    $scope.averageComprehensionPerClass = avgComprehensionPerClass ? avgComprehensionPerClass + '%' : '---';
    $scope.totalClassesTaught = totalClasses ? totalClasses : '---';
    $scope.totalStudentsTaught = totalStudentsTaught ? totalStudentsTaught : '---';

  })

  ///////////////////////////////
  /// POPULATE DATA PER CLASS ///
  ///////////////////////////////

  $scope.showingClassID;
  $scope.toggleClass = function(id){
    $scope.showingClassID = $scope.showingClassID === id ? undefined : id;
    if ($scope.showingClassID){
      $scope.showClassDetails(id);
    }
  }

  $scope.showingStudentID;
  $scope.toggleStudent = function(id){
    $scope.showingStudentID = $scope.showingStudentID === id ? undefined : id;
    if ($scope.showingStudentID){
      $scope.viewStudentStats(id);
    }
  }

  $ionicModal.fromTemplateUrl('chat-modal.html', {
    scope: $scope,
    animation: 'slide-in-up'
  }).then(function(modal) {
    $scope.modal = modal;
  });
  $scope.openModal = function() {
    $scope.modal.show();
  };
  $scope.closeModal = function() {
    $scope.modal.hide();
  };
  //Cleanup the modal when we're done with it!
  $scope.$on('$destroy', function() {
    $scope.modal.remove();
  });
  // Execute action on hide modal
  $scope.$on('modal.hidden', function() {
    // Execute action
  });
  // Execute action on remove modal
  $scope.$on('modal.removed', function() {
    // Execute action
  });


  $scope.showClassDetails = function(id){

    if (id === 'reset'){
      $scope.showNone = true;
      $scope.studentStats = undefined;
      return;
    }
    $scope.studentStats = undefined;
    $scope.showNone = false;

    classesDataRef.child(id).once('value', function(classData){
      $scope.currentClassTime = classData.val().time;

      var chatrooms = classData.val().chatrooms;
      var chatroomsArray = [];
      for (var key in chatrooms){
        chatroomsArray.push(chatrooms[key]);
      }
      $scope.chatrooms = chatroomsArray;

      var data = classData.val().data;
      var classDataArray = [];
      for (var key in data){
        classDataArray.push(data[key]);
      }
      $scope.currentClassData = classDataArray;

      $scope.totalStudents = classDataArray.reduce(function(most, snap){
        return snap.students && snap.students.length > most ? snap.students.length : most;
      }, 0)

      $scope.avgComp = Math.round(classDataArray.reduce(function(total, snap){
        return total + snap.percentage;
      }, 0)/classDataArray.length);

      $scope.duration = getTotalClassTime(classDataArray);

      $scope.classPoints = getTotalPoints(classDataArray);

      $scope.studentList = getStudentList(classDataArray);

      $scope.displayMessage = function(message){
        var sender = $scope.studentList[message.sender] ? $scope.studentList[message.sender].name : undefined;
        var message = message.text;
        return sender ? `${sender}  :  ${message}` : `- Begin Chat -`
      }

      $scope.viewStudentStats = function(studentID){
        $scope.studentStats = getStudentStats(studentID, classDataArray, $scope.studentList, chatroomsArray);
      }

    })

    function getTotalClassTime(data){
      var end = moment( d3.max(data, function(d){ return d.time }) );
      var beginning = moment( d3.min(data, function(d){ return d.time }) );
      return end.from(beginning, true);
    }

    function getTotalPoints(data){
      return data.reduce(function(most, snap){
        return snap.points && snap.points > most ? snap.points : most;
      }, 0)
    }

    function getLowComprehensionTimes(classSnap, threshold){

    }

    function getStudentList(data){
      var list = {};

      data.forEach(function(snap){
        if (snap.students){
          for (var idx in snap.students){
            if (!list[snap.students[idx].id]){
              list[snap.students[idx].id] = snap.students[idx]
            }
          }
        }
      });
      return list;
    }

    function getStudentStats(studentID, data, studentList, chatroomsArray){

      var studentInfo = studentList[studentID];

      var studentSnaps = data.filter(function(snap){
        return snap.students ? snap.students.some(function(s){
          return s.id === studentID
        }) : false;
      }).map(function(snap){
        var student = snap.students.find(function(s){
          return s.id === studentID;
        });
        var time = snap.time;

        var chatrooms = snap.chatrooms ? snap.chatrooms.find(function(s){
          return s.helpee === studentID || s.helper === studentID
        }) : null;

        var percentage = snap.percentage || null;

        var points = snap.points || null;

        return {
          student: student,
          time: time,
          percentage: percentage,
          points: points,
          chatrooms: chatrooms
        };
      })

      var stats = {
        studentInfo: {
          avatar: studentInfo.avatar,
          name: studentInfo.name,
          id: studentInfo.id
        },
        totalTimeInClass: getTotalClassTime(studentSnaps),
        helpeeTime: studentTimeAsHelpee(studentSnaps),
        helperTime: studentTimeAsHelper(studentSnaps),
        chatHistory: studentChatHistory(chatroomsArray),
        avgComprehensionRate: studentAverageComprehensionRateForClass(studentSnaps),
      };

      function studentTimeAsHelpee(studentSnaps){
        var helpeeTimeArray = studentSnaps.filter(function(snap){
          return snap.student.helpee;
        });

        var helpeeTime = moment.duration(helpeeTimeArray.length*1000)

        return helpeeTime.humanize()
      }

      function studentTimeAsHelper(studentSnaps){
        var helperTimeArray = studentSnaps.filter(function(snap){
          return snap.student.helper;
        });

        var helperTime = moment.duration(helperTimeArray.length*1000)

        return helperTime.humanize()
      }

      function studentChatHistory(chatroomsArray){
        var helpeeChats = chatroomsArray.filter(function(snap){
          return snap.helpee === studentID
        });
        var helperChats = chatroomsArray.filter(function(snap){
          return snap.helper === studentID
        });

        return {
          helpeeChats: helpeeChats,
          helperChats: helperChats
        }
      }

      function studentAverageComprehensionRateForClass(data){
        var helpeeTimeArray = studentSnaps.filter(function(snap){
          return snap.student.helpee;
        });
        return Math.round(((data.length - helpeeTimeArray.length)/data.length)*100) + '%';
      }

      return stats;
    }

  }

});

angular.module('app')
.controller("studentCtrl", function(Auth, currentAuth, $state, $rootScope, $scope, $firebaseObject, $firebaseArray, $timeout) {

  $scope.classID = $state.params.classID;
  console.log('classID', $scope)

  var userRef = new Firebase(`https://getitgotit.firebaseio.com/users/${currentAuth.uid}`);
  var user = $firebaseObject(userRef);
  user.$bindTo($scope, 'user')
  // .then(function(){
  //   // make sure user didn't use back button to leave
  //   $timeout(function(){
  //     if (!$scope.user.class || $scope.user.class.id !== $state.params.classID){
  //       $state.go('home');
  //     } else if ($scope.user.helpee){
  //       $state.go('chatroom-helpee', {classID: $state.params.classID, chatID: $scope.user.helpee});
  //     } else if ($scope.user.helper){
  //       $state.go('chatroom-helper', {classID: $state.params.classID, chatID: $scope.user.helper.chatID});
  //     }
  //   }, 300)
  // })

  var classroomRef = new Firebase(`https://getitgotit.firebaseio.com/classrooms/${$state.params.classID}`);
  var classroom = $firebaseObject(classroomRef);
  classroom.$bindTo($scope, 'classroom');

  // remove student if teacher ends the class;
  var classroomsRef = new Firebase(`https://getitgotit.firebaseio.com/classrooms`);
  classroomsRef.on('child_removed', function(removedClassroom){
    if (removedClassroom.key() === $state.params.classID) {
      $scope.user.helpee = false;
      $scope.user.helper = false;
      $scope.user.class = null;
      $state.go('home');
    }
  });

  var studentsRef = new Firebase(`https://getitgotit.firebaseio.com/classrooms/${$state.params.classID}/students`);
  $scope.students = $firebaseArray(studentsRef);

  var chatroomsRef = new Firebase(`https://getitgotit.firebaseio.com/classrooms/${$state.params.classID}/chatrooms`);
  $scope.chatrooms = $firebaseArray(chatroomsRef);

  // display help button
  chatroomsRef.on('value', function(snap){
    if (!snap.val()){
      $scope.displayHelp = false;
    }
    snap.forEach(function(child){
      if (!child.val().helper){
        $scope.displayHelp = true;
        return true;
      }
      $scope.displayHelp = false;
    })
  })


  $scope.needHelp = function(){
    $scope.loading = true;
    // create new chatroom for user
    if (!$scope.user || !$scope.chatrooms) {
      $scope.loading = false;
      return;
    }

    $scope.chatrooms.$add({ helpee: currentAuth.uid }).then(function(chat){
      var chatID = chat.key();
      $scope.user.helpee = chatID;

      // update students list in class for viz
      var index = $scope.students.$indexFor($scope.user.class.key);
      $scope.students.$getRecord($scope.user.class.key).helpee = chatID;
      $scope.students.$save(index);

      $state.go('chatroom-helpee', {classID: $state.params.classID, chatID: chatID});
    })
  }

  $scope.helpSomeone = function(){
    $scope.loading = true;
    // join chatroom of user that needs help
    chatroomsRef.once('value', function(chatrooms){

      chatrooms.forEach(function(chatroom){
        // find any chatroom with no helper
        if (!chatroom.val().helper){
          var index = $scope.chatrooms.$indexFor(chatroom.key())

          $scope.chatrooms[index].helper = currentAuth.uid;
          $scope.chatrooms.$save(index);

          $scope.user.helper = {
            helping: $scope.chatrooms[index].helpee,
            chatID: chatroom.key()
          }

          // update students list in class for viz
          var studentsIndex = $scope.students.$indexFor($scope.user.class.key);
          $scope.students.$getRecord($scope.user.class.key).helper = {
            helping: $scope.chatrooms[index].helpee,
            chatID: chatroom.key()
          }
          $scope.students.$save(studentsIndex);

          $state.go('chatroom-helper', {classID: $state.params.classID, chatID: chatroom.key()});
          return true;
        }
      })
    })
  }

  $scope.leaveClass = function(){
    $scope.loading = true;
    $scope.students.$remove($scope.students.$getRecord($scope.user.class.key));
    $scope.user.class = null;
    $state.go('home');
  }

  $scope.logout = function(){
    $scope.loading = true;
    $scope.students.$remove($scope.students.$getRecord($scope.user.class.key));
    $scope.user.class = null;
    $timeout(function(){
      Auth.$unauth();
      $state.go('splash');
    },200)
  }

});

angular.module('app')
.controller("teacherCtrl", function(Auth, currentAuth, $state, $scope, $firebaseObject, $firebaseArray, $timeout, $interval) {
  $scope.classID = $state.params.classID;

  var classDataRef = new Firebase(`https://getitgotit.firebaseio.com/users/${currentAuth.uid}/classesData/${$state.params.classID}`);
  var classData = $firebaseObject(classDataRef);
  classData.$bindTo($scope, 'classData').then(function(){
    if (!$scope.classData.time){
      $scope.classData.time = Date.now();
    }
  })

  var dataRef = new Firebase(`https://getitgotit.firebaseio.com/users/${currentAuth.uid}/classesData/${$state.params.classID}/data`);
  $scope.timeData = $firebaseArray(dataRef);

  var userRef = new Firebase(`https://getitgotit.firebaseio.com/users/${currentAuth.uid}`);
  var user = $firebaseObject(userRef);
  user.$bindTo($scope, 'user');

  var classroomRef = new Firebase(`https://getitgotit.firebaseio.com/classrooms/${$state.params.classID}`);
  var classroom = $firebaseObject(classroomRef);
  classroom.$bindTo($scope, 'classroom');

  var studentsRef = new Firebase(`https://getitgotit.firebaseio.com/classrooms/${$state.params.classID}/students`);
  $scope.students = $firebaseArray(studentsRef);

  var chatroomsRef = new Firebase(`https://getitgotit.firebaseio.com/classrooms/${$state.params.classID}/chatrooms`);
  $scope.chatrooms = $firebaseArray(chatroomsRef);

  var teacherChatroomsRef = new Firebase(`https://getitgotit.firebaseio.com/users/${currentAuth.uid}/classesData/${$state.params.classID}/chatrooms`);
  $scope.teacherChatrooms = $firebaseArray(teacherChatroomsRef);

  // flash chatroom info to teacher chatrooms record on chatroom end
  chatroomsRef.on('child_removed', function(snap){
    $scope.teacherChatrooms.$add(snap.val());
  })

  var green;
  var updatePercentage = function(){
    if ($scope.students.length){
      $scope.percentage = Math.round((1 - ($scope.chatrooms.length / $scope.students.length))*100) + '%';
      if ($scope.percentage == '100%' && !green){
        // document.querySelectorAll("link[rel*='icon'")[0].setAttribute('href', "assets/greencircle.ico");
        green = true;
      } else if ($scope.percentage != '100%'){
        // document.querySelectorAll("link[rel*='icon'")[0].setAttribute('href', "assets/redcircle.ico");
        green = false;
      }
    } else {
      $scope.percentage = '...';
    }
  }

  var updatePoints = function(){
    $scope.points = $scope.students.reduce(function(a, student){
      return a + student.points;
    }, 0);
  }

  $scope.chatrooms.$watch(function(e){
    updatePercentage();
  });
  $scope.students.$watch(function(e){
    updatePercentage();
    updatePoints();
  });

  // track realtime classroom data over time
  $scope.isRecording;
  $scope.startRecording = function(){
    $scope.isRecording = $interval(function(){
      var info = {
        time: Date.now(),
        percentage: (!$scope.percentage || $scope.percentage == '...') ? 0 : +$scope.percentage.slice(0,-1),
        chatrooms: $scope.chatrooms || null,
        points: $scope.points || null,
        students: $scope.students || null
      };
      $scope.timeData.$add(info);
    }, 1000)
  }

  $scope.pauseRecording = function(){
    if (!$scope.isRecording) return;
    $interval.cancel($scope.isRecording);
    $scope.isRecording = undefined;
  }

  $scope.endClass = function(){
    $scope.loading = true;

    $interval.cancel($scope.isRecording);

    classroom.$remove();

    $scope.user.teacher = false;

    // document.querySelectorAll("link[rel*='icon'")[0].setAttribute('href', "assets/greencircle.ico");
    $state.go('home');

  }



});

angular.module('app')
.factory("Auth", ["$firebaseAuth", function($firebaseAuth) {
    var ref = new Firebase("https://getitgotit.firebaseio.com/");
    ref.onAuth(function(authData) {
      if (authData) {
        ref.child(`users/${authData.uid}`).once('value', function(snap){
          var isNewUser = !snap.exists();
          if (isNewUser){
            switch(authData.provider){
              case 'password':
                ref.child(`users/${authData.uid}`).set({
                  name: authData.password.email.replace(/@.*/, ''),
                  avatar: 'assets/defaultPic.png',
                  points: 0,
                  helpee: false,
                  helper: false,
                  helping: null,
                  teacher: false
                });
                break;
              case 'facebook':
                ref.child(`users/${authData.uid}`).set({
                  name: authData.facebook.displayName,
                  avatar: authData.facebook.profileImageURL,
                  points: 0,
                  helpee: false,
                  helper: false,
                  helping: null,
                  teacher: false
                });
                break;
            }
          }
        });
      }
    });


    // if (!$scope.users[authData.uid]){
    //   $scope.users[authData.uid] = {
    //     name: authData.password.email.replace(/@.*/, ''),
    //     avatar: 'assets/defaultPic.png',
    //     points: 0,
    //     helpee: false,
    //     helper: false,
    //     helping: null,
    //     teacher: false
    //   }
    // }

    return $firebaseAuth(ref);
  }
]);
